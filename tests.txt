const showProducts = (products) => {
	for (const product of products) {
		let productTemplate = `
		<div class="product-item">
		<h2>${product.name}</h2>
		<img src=${product.imageUrl}>
		<p>${product.price}€</p>
	<div class="product-btns">
			
			<a href="produit.html?product=${product.id}" class="more-info">Plus d'informations</a>
	</div>
		</div>
		`;
		app.innerHTML += productTemplate;
	}
};

La fonction attend un tableau d'objets, chaque objet disposant des attributs name, imageUrl,prix et ID.

pour:

let exemple = [{id:"12345",imageUrl:"http://www.example1.com/",name:"test1",price:39}
,{id:"2345",imageUrl:"http://www.example2.com/",name:"test2",price:39}
,{id:"3456",imageUrl:"http://www.example3.com/",name:"test3",price:39}]

showProducts(exemple) devrait créer 3 divs product item ayant pour h2 l'attribut name, l'img le lien fournit par imageUrl, 
un <p></p> avec le prix et un bouton avec un lien menant vers la page produit avec une ancre contenant l'id produit.


après test, c'est exactement ce que cette fonction fait. 


const colorsList = (colors) => {
				let tempStr = "";
				for (color of colors) {
					tempStr += `<option value="${color}">${color}</option>`;
				}
				return tempStr;
			};


La fonction attend un tableau contenant différentes couleurs sous forme de string.

Le but étant de créer une string contenant une <option></option> avec la value color et le texte indiquant la color pour chaque couleur du tableau
puis de retourner l'ensemble de la string contenant les différentes options.

par exemple pour l'argument: ["bleu","rouge", "vert"]

la fonction devrait retourner:
<option value="bleu">bleu</option>
<option value="rouge">rouge</option>
<option value="vert">vert</option>

et après test elle retourne:

<option value="bleu">bleu</option>
<option value="rouge">rouge</option>
<option value="vert">vert</option>
